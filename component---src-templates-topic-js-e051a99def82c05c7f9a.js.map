{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/post/row.js","webpack://gatsby-starter-default/./src/components/post/list.js","webpack://gatsby-starter-default/./src/templates/topic.js"],"names":["post","isArchive","node","className","Link","title","to","fields","path","image","childImageSharp","G","getImage","style","position","teaser","childMarkdownRemark","html","replace","createdOn","posts","map","index","key","capitalize","topic","split","part","charAt","toUpperCase","slice","join","data","contentfulTopic","body","dangerouslySetInnerHTML","__html","allContentfulPost","nodes","length","id","isFooter"],"mappings":"uMA+BA,EA3BgB,SAAC,GAA+B,IAA9BA,EAA6B,EAA7BA,KAA6B,IAAvBC,iBAAuB,SAG3C,OAFAD,EAAOA,EAAKE,MAAQF,EAGpB,sBAAIG,UAAW,YAAcF,EAAY,WAAa,KAClD,gBAAC,EAAAG,KAAD,CAAMC,MAAO,CAACL,EAAKK,OAAQC,GAAIN,EAAKO,OAAOC,KAAML,UAAU,wBACrDF,GAAaD,EAAKS,OAAST,EAAKS,MAAMC,iBACpC,uBAAKP,UAAU,6BACX,gBAAC,EAAAQ,EAAD,CAAaF,OAAOG,OAASZ,EAAKS,MAAMC,iBAAkBP,UAAU,kBAAkBU,MAAO,CACzFC,SAAU,cAEd,gBAAC,EAAAH,EAAD,CAAaF,OAAOG,OAASZ,EAAKS,MAAMC,iBAAkBP,UAAU,kBAAkBU,MAAO,CACzFC,SAAU,eAKtB,uBAAKX,UAAU,qBACX,sBAAIA,UAAU,mBAAmBH,EAAKK,QACpCJ,GAAaD,EAAKe,QAAW,sBAAIZ,UAAU,sBAAsBH,EAAKe,OAAOC,oBAAoBC,KAAKC,QAAQ,gBAAiB,MAGrI,yBAAOf,UAAU,mBAAmBH,EAAKmB,cCXrD,EAZiB,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,IAASnB,iBAAT,gBACb,uBAAKE,UAAW,aAAeF,EAAY,YAAc,KACpDA,GAAc,sBAAIE,UAAU,oBAAd,kBAEf,0BACKiB,GAASA,EAAMC,KAAI,SAACrB,EAAMsB,GAAP,OAChB,gBAAC,EAAD,CAAStB,KAAMA,EAAMC,UAAWA,EAAWsB,IAAKD,W,+FCFhE,SAASE,EAAWC,GAChB,OAAOA,EACFpB,MACAqB,MAAM,KACNL,KAAI,SAASM,GACV,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MAEpDC,KAAK,KA8Dd,UA3DsB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACpB,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,6BAAQR,EAAWQ,EAAKC,iBAAxB,YAGJ,uBAAK9B,UAAU,QACX,0BAAQA,UAAU,gBACd,sBAAIA,UAAU,eAAeqB,EAAWQ,EAAKC,kBAE5CD,EAAKC,gBAAgBC,MAAQF,EAAKC,gBAAgBC,KAAKlB,oBAAoBC,MAAS,sBAAId,UAAU,iBAAiBgC,wBAAyB,CAACC,OAAQJ,EAAKC,gBAAgBC,KAAKlB,oBAAoBC,KAAKC,QAAQ,gBAAiB,SAIzOc,GAAQA,EAAKK,mBAAqBL,EAAKK,kBAAkBC,OAASN,EAAKK,kBAAkBC,MAAMC,OAAS,GACrG,gBAAC,IAAD,CAAUnB,MAAOY,EAAKK,kBAAkBC,QAG3CN,GAAQA,EAAKK,mBAAqBL,EAAKK,kBAAkBC,QAAUN,EAAKK,kBAAkBC,MAAMC,QAC7F,4CAGJ,0BAAQC,GAAG,YAAYrC,UAAU,YAC7B,gBAAC,IAAD,CAASsC,UAAU","file":"component---src-templates-topic-js-e051a99def82c05c7f9a.js","sourcesContent":["import React from \"react\"\nimport {Link} from 'gatsby'\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nconst PostRow = ({post, isArchive = false}) => {\n    post = post.node || post;\n\n    return (\n    <li className={\"list-row\" + (isArchive ? ' archive' : '')}>\n        <Link title={[post.title]} to={post.fields.path} className='list-row__container'>\n            {!isArchive && post.image && post.image.childImageSharp && (\n                <div className='list-row__image-container'>\n                    <GatsbyImage image={getImage(post.image.childImageSharp)} className='list-row__image' style={{\n                        position: 'absolute'\n                    }} />\n                    <GatsbyImage image={getImage(post.image.childImageSharp)} className='list-row__image' style={{\n                        position: 'absolute'\n                    }} />\n                </div>\n            )}\n\n            <div className=\"list-row__content\">\n                <h2 className='list-row__title'>{post.title}</h2>\n                {!isArchive && post.teaser && (<h3 className='list-row__subtitle'>{post.teaser.childMarkdownRemark.html.replace(/(<([^>]+)>)/gi, \"\")}</h3>)}\n            </div>\n\n            <aside className=\"list-row__dates\">{post.createdOn}</aside>\n        </Link>\n    </li>\n)};\n\nexport default PostRow","import React from \"react\"\nimport PostRow from \"./row\";\n\nconst PostList = ({posts, isArchive = false}) => (\n    <div className={'post-list' + (isArchive ? '--archive' : '')}>\n        {isArchive && (<h3 className=\"post-list__title\">More like this</h3>)}\n\n        <ul>\n            {posts && posts.map((post, index) => (\n                <PostRow post={post} isArchive={isArchive} key={index} />\n            ))}\n        </ul>\n    </div>\n);\n\nexport default PostList","import React from \"react\"\nimport DefaultTemplate from \"./default\";\nimport {graphql} from \"gatsby\";\nimport {Profile} from \"../components/profile/index\";\nimport {Helmet} from \"react-helmet\";\nimport PostList from \"../components/post/list\";\n\nfunction capitalize(topic) {\n    return topic\n        .title\n        .split(' ')\n        .map(function(part) {\n            return part.charAt(0).toUpperCase() + part.slice(1);\n        })\n        .join(' ');\n}\n\nconst TopicTemplate = ({data}) => {\n    return (\n        <DefaultTemplate>\n            <Helmet>\n                <title>{capitalize(data.contentfulTopic)} | Jvar</title>\n            </Helmet>\n\n            <div className=\"post\">\n                <header className=\"post__header\">\n                    <h1 className=\"post__title\">{capitalize(data.contentfulTopic)}</h1>\n\n                    {data.contentfulTopic.body && data.contentfulTopic.body.childMarkdownRemark.html && (<h2 className=\"post__headline\" dangerouslySetInnerHTML={{__html: data.contentfulTopic.body.childMarkdownRemark.html.replace(/(<([^>]+)>)/gi, \"\")}} />)}\n                </header>\n            </div>\n\n            {data && data.allContentfulPost && data.allContentfulPost.nodes && data.allContentfulPost.nodes.length > 0 && (\n                <PostList posts={data.allContentfulPost.nodes} />\n            )}\n\n            {data && data.allContentfulPost && data.allContentfulPost.nodes && !data.allContentfulPost.nodes.length && (\n                <p>No posts found!</p>\n            )}\n\n            <footer id=\"post-meta\" className=\"clearfix\">\n                <Profile isFooter={true}/>\n            </footer>\n        </DefaultTemplate>\n    )\n};\n\nexport const pageQuery = graphql`\n  query($topicID: String!) {\n    contentfulTopic(id: {eq: $topicID}) {\n        title\n        slug\n        body {\n          childMarkdownRemark {\n            html\n          }\n        }\n    }\n    allContentfulPost(filter: {topics: {elemMatch: {id: {eq: $topicID}}}}) {\n        nodes {\n          id\n          title\n          createdOn,\n          teaser {\n            childMarkdownRemark {\n              html\n            }\n          }\n          fields {\n            path\n          }\n        }\n      }\n  }\n`;\n\nexport default TopicTemplate;"],"sourceRoot":""}