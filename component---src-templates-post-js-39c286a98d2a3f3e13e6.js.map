{"version":3,"sources":["webpack:///./src/components/topic/list.js","webpack:///./src/templates/post.js","webpack:///./src/components/post/row.js","webpack:///./src/components/post/list.js"],"names":["TopicList","render","args","className","this","props","topics","map","topic","index","to","slug","key","title","React","Component","pageQuery","BlogTemplate","data","Helmet","contentfulPost","createdOn","length","dangerouslySetInnerHTML","__html","body","childMarkdownRemark","html","isFooter","allMarkdownRemark","nodes","posts","isArchive","PostRow","post","node","fields","path","date","teaser","replace","PostList"],"mappings":"mOAGqBA,E,kGACjBC,OAAA,SAAOC,GACH,OACI,0BAAMC,UAAU,UACZ,sCAECC,KAAKC,MAAMC,OAAOC,KAAI,SAACC,EAAOC,GAAR,OACnB,kBAAC,OAAD,CAAMN,UAAU,eAAeO,GAAE,UAAYF,EAAMG,KAAQC,IAAKH,GAC3DD,EAAMK,Y,GARQC,IAAMC,W,YCwChCC,EAAS,YAmBPC,UAtDM,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACnB,OACI,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,KACI,+BAAQD,EAAKE,eAAeP,MAA5B,YAGJ,6BAASV,UAAU,QACf,4BAAQA,UAAU,gBACd,wBAAIA,UAAU,eACTe,EAAKE,eAAeP,OAGzB,wBAAIV,UAAU,kBACV,qCAAiBe,EAAKE,eAAeC,UAEpCH,GAAQA,EAAKE,gBAAkBF,EAAKE,eAAed,QAAUY,EAAKE,eAAed,OAAOgB,QACrF,kBAAC,EAAD,CAAWhB,OAAQY,EAAKE,eAAed,WAKnD,6BAASH,UAAU,aAAaoB,wBAAyB,CAACC,OAAQN,EAAKE,eAAeK,KAAKC,oBAAoBC,SAGnH,kBAAC,IAAD,CAASC,UAAU,IAElBV,GAAQA,EAAKW,mBAAqBX,EAAKW,kBAAkBC,OAASZ,EAAKW,kBAAkBC,MAAMR,OAAS,GACrG,kBAAC,IAAD,CAAUS,MAAOb,EAAKW,kBAAkBC,MAAOE,WAAW,O,uECnB3DC,EAdC,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAA6B,IAAvBF,iBAAuB,SAG3C,OAFAE,EAAOA,EAAKC,MAAQD,EAGpB,wBAAI/B,UAAW,YAAc6B,EAAY,WAAa,KAClD,kBAAC,OAAD,CAAMnB,MAAO,CAACqB,EAAKrB,OAAQH,GAAIwB,EAAKE,OAAOC,MACvC,2BAAOlC,UAAU,SAAS+B,EAAKI,MAE9BJ,EAAKrB,OACJmB,GAAaE,EAAKK,QAAW,4BAAKL,EAAKK,OAAOb,oBAAoBC,KAAKa,QAAQ,gBAAiB,QCG/FC,IAZE,SAAC,GAAD,IAAEV,EAAF,EAAEA,MAAF,IAASC,iBAAT,gBACb,yBAAK7B,UAAW,aAAe6B,EAAY,YAAc,KACpDA,GAAc,wBAAI7B,UAAU,oBAAd,kBAEf,4BACK4B,GAASA,EAAMxB,KAAI,SAAC2B,EAAMzB,GAAP,OAChB,kBAAC,EAAD,CAASyB,KAAMA,EAAMF,UAAWA,EAAWpB,IAAKH","file":"component---src-templates-post-js-39c286a98d2a3f3e13e6.js","sourcesContent":["import React from \"react\"\nimport {Link} from \"gatsby\";\n\nexport default class TopicList extends React.Component {\n    render(args) {\n        return (\n            <span className=\"topics\">\n                <span> in </span>\n\n                {this.props.topics.map((topic, index) => (\n                    <Link className=\"topics__list\" to={`/topic/${topic.slug}`} key={index}>\n                        {topic.title}\n                    </Link>\n                ))}\n            </span>\n        );\n    }\n}","import React from \"react\"\nimport DefaultTemplate from \"./default\";\nimport {graphql} from \"gatsby\";\nimport { Helmet } from \"react-helmet\"\nimport {Profile} from \"../components/profile/index\";\nimport TopicList from \"../components/topic/list\";\nimport PostList from \"../components/post/list\";\n\nconst BlogTemplate = ({data}) => {\n    return (\n        <DefaultTemplate>\n            <Helmet>\n                <title>{data.contentfulPost.title} | Jvar</title>\n            </Helmet>\n\n            <article className=\"post\">\n                <header className=\"post__header\">\n                    <h1 className=\"post__title\">\n                        {data.contentfulPost.title}\n                    </h1>\n\n                    <h2 className=\"post__headline\">\n                        <span>On </span>{data.contentfulPost.createdOn}\n\n                        {data && data.contentfulPost && data.contentfulPost.topics && data.contentfulPost.topics.length && (\n                            <TopicList topics={data.contentfulPost.topics} />\n                        )}\n                    </h2>\n                </header>\n\n                <section className=\"post__body\" dangerouslySetInnerHTML={{__html: data.contentfulPost.body.childMarkdownRemark.html}}/>\n            </article>\n\n            <Profile isFooter={true}/>\n\n            {data && data.allMarkdownRemark && data.allMarkdownRemark.nodes && data.allMarkdownRemark.nodes.length > 0 && (\n                <PostList posts={data.allMarkdownRemark.nodes} isArchive={true} />\n            )}\n\n        </DefaultTemplate>\n    )\n};\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    contentfulPost(id: { eq: $id }) {\n      title\n      body {\n        childMarkdownRemark {\n          html\n        }\n      }\n      createdOn(formatString: \"MMMM DD, YYYY\")\n      topics {\n        id\n        title\n        slug\n      }\n    }\n  }\n`;\n\nexport default BlogTemplate;","import React from \"react\"\nimport {Link} from 'gatsby'\n\nconst PostRow = ({post, isArchive = false}) => {\n    post = post.node || post;\n\n    return (\n    <li className={\"list-row\" + (isArchive ? ' archive' : '')}>\n        <Link title={[post.title]} to={post.fields.path}>\n            <aside className=\"dates\">{post.date}</aside>\n\n            {post.title}\n            {!isArchive && post.teaser && (<h2>{post.teaser.childMarkdownRemark.html.replace(/(<([^>]+)>)/gi, \"\")}</h2>)}\n        </Link>\n    </li>\n)};\n\nexport default PostRow","import React from \"react\"\nimport PostRow from \"./row\";\n\nconst PostList = ({posts, isArchive = false}) => (\n    <div className={'post-list' + (isArchive ? '--archive' : '')}>\n        {isArchive && (<h3 className=\"post-list__title\">More like this</h3>)}\n\n        <ul>\n            {posts && posts.map((post, index) => (\n                <PostRow post={post} isArchive={isArchive} key={index} />\n            ))}\n        </ul>\n    </div>\n);\n\nexport default PostList"],"sourceRoot":""}