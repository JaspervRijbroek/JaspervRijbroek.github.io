{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/post/row.js","webpack://gatsby-starter-default/./src/components/post/list.js","webpack://gatsby-starter-default/./src/components/topic/list.js","webpack://gatsby-starter-default/./src/templates/post.js"],"names":["post","isArchive","node","className","Link","title","to","fields","path","createdOn","teaser","childMarkdownRemark","html","replace","posts","map","index","key","TopicList","render","args","this","props","topics","topic","slug","React","data","Helmet","contentfulPost","length","dangerouslySetInnerHTML","__html","body","isFooter","allContentfulPost","nodes"],"mappings":"6LAiBA,EAdgB,SAAC,GAA+B,IAA9BA,EAA6B,EAA7BA,KAA6B,IAAvBC,iBAAuB,SAG3C,OAFAD,EAAOA,EAAKE,MAAQF,EAGpB,sBAAIG,UAAW,YAAcF,EAAY,WAAa,KAClD,gBAAC,EAAAG,KAAD,CAAMC,MAAO,CAACL,EAAKK,OAAQC,GAAIN,EAAKO,OAAOC,MACvC,yBAAOL,UAAU,SAASH,EAAKS,WAE9BT,EAAKK,OACJJ,GAAaD,EAAKU,QAAW,0BAAKV,EAAKU,OAAOC,oBAAoBC,KAAKC,QAAQ,gBAAiB,QCG9G,EAZiB,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,IAASb,iBAAT,gBACb,uBAAKE,UAAW,aAAeF,EAAY,YAAc,KACpDA,GAAc,sBAAIE,UAAU,oBAAd,kBAEf,0BACKW,GAASA,EAAMC,KAAI,SAACf,EAAMgB,GAAP,OAChB,gBAAC,EAAD,CAAShB,KAAMA,EAAMC,UAAWA,EAAWgB,IAAKD,W,+ICN3CE,E,6FACjBC,OAAA,SAAOC,GACH,OACI,wBAAMjB,UAAU,UACZ,oCAECkB,KAAKC,MAAMC,OAAOR,KAAI,SAACS,EAAOR,GAAR,OACnB,gBAAC,EAAAZ,KAAD,CAAMD,UAAU,eAAeG,GAAE,UAAYkB,EAAMC,KAAQR,IAAKD,GAC3DQ,EAAMnB,Y,GARQqB,a,UC0EvC,EArEqB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACnB,OACI,gBAAC,IAAD,KACI,gBAACC,EAAA,EAAD,KACI,6BAAQD,EAAKE,eAAexB,MAA5B,YAGJ,2BAASF,UAAU,QACf,0BAAQA,UAAU,gBACd,sBAAIA,UAAU,eACTwB,EAAKE,eAAexB,OAGzB,sBAAIF,UAAU,kBACV,mCAAiBwB,EAAKE,eAAepB,UAEpCkB,GAAQA,EAAKE,gBAAkBF,EAAKE,eAAeN,QAAUI,EAAKE,eAAeN,OAAOO,QACrF,gBAACZ,EAAD,CAAWK,OAAQI,EAAKE,eAAeN,WAKnD,2BAASpB,UAAU,aAAa4B,wBAAyB,CAACC,OAAQL,EAAKE,eAAeI,KAAKtB,oBAAoBC,SAGnH,gBAAC,IAAD,CAASsB,UAAU,IAElBP,GAAQA,EAAKQ,mBAAqBR,EAAKQ,kBAAkBC,OAAST,EAAKQ,kBAAkBC,MAAMN,OAAS,GACrG,gBAAC,IAAD,CAAUhB,MAAOa,EAAKQ,kBAAkBC,MAAOnC,WAAW","file":"component---src-templates-post-js-48de95cbcad8d6c41563.js","sourcesContent":["import React from \"react\"\nimport {Link} from 'gatsby'\n\nconst PostRow = ({post, isArchive = false}) => {\n    post = post.node || post;\n\n    return (\n    <li className={\"list-row\" + (isArchive ? ' archive' : '')}>\n        <Link title={[post.title]} to={post.fields.path}>\n            <aside className=\"dates\">{post.createdOn}</aside>\n\n            {post.title}\n            {!isArchive && post.teaser && (<h2>{post.teaser.childMarkdownRemark.html.replace(/(<([^>]+)>)/gi, \"\")}</h2>)}\n        </Link>\n    </li>\n)};\n\nexport default PostRow","import React from \"react\"\nimport PostRow from \"./row\";\n\nconst PostList = ({posts, isArchive = false}) => (\n    <div className={'post-list' + (isArchive ? '--archive' : '')}>\n        {isArchive && (<h3 className=\"post-list__title\">More like this</h3>)}\n\n        <ul>\n            {posts && posts.map((post, index) => (\n                <PostRow post={post} isArchive={isArchive} key={index} />\n            ))}\n        </ul>\n    </div>\n);\n\nexport default PostList","import React from \"react\"\nimport {Link} from \"gatsby\";\n\nexport default class TopicList extends React.Component {\n    render(args) {\n        return (\n            <span className=\"topics\">\n                <span> in </span>\n\n                {this.props.topics.map((topic, index) => (\n                    <Link className=\"topics__list\" to={`/topic/${topic.slug}`} key={index}>\n                        {topic.title}\n                    </Link>\n                ))}\n            </span>\n        );\n    }\n}","import React from \"react\"\nimport DefaultTemplate from \"./default\";\nimport {graphql} from \"gatsby\";\nimport { Helmet } from \"react-helmet\"\nimport {Profile} from \"../components/profile/index\";\nimport TopicList from \"../components/topic/list\";\nimport PostList from \"../components/post/list\";\n\nconst BlogTemplate = ({data}) => {\n    return (\n        <DefaultTemplate>\n            <Helmet>\n                <title>{data.contentfulPost.title} | Jvar</title>\n            </Helmet>\n\n            <article className=\"post\">\n                <header className=\"post__header\">\n                    <h1 className=\"post__title\">\n                        {data.contentfulPost.title}\n                    </h1>\n\n                    <h2 className=\"post__headline\">\n                        <span>On </span>{data.contentfulPost.createdOn}\n\n                        {data && data.contentfulPost && data.contentfulPost.topics && data.contentfulPost.topics.length && (\n                            <TopicList topics={data.contentfulPost.topics} />\n                        )}\n                    </h2>\n                </header>\n\n                <section className=\"post__body\" dangerouslySetInnerHTML={{__html: data.contentfulPost.body.childMarkdownRemark.html}}/>\n            </article>\n\n            <Profile isFooter={true}/>\n\n            {data && data.allContentfulPost && data.allContentfulPost.nodes && data.allContentfulPost.nodes.length > 0 && (\n                <PostList posts={data.allContentfulPost.nodes} isArchive={true} />\n            )}\n\n        </DefaultTemplate>\n    )\n};\n\nexport const pageQuery = graphql`\n  query($id: String!, $topics: [String]!) {\n    contentfulPost(id: { eq: $id }) {\n      title\n      body {\n        childMarkdownRemark {\n          html\n        }\n      }\n      createdOn(formatString: \"MMMM DD, YYYY\")\n      topics {\n        id\n        title\n        slug\n      }\n    }\n    allContentfulPost(filter: {topics: {elemMatch: {id: {in: $topics}}}, id: {ne: $id}}, sort: {fields: createdOn, order: DESC}, limit: 5) {\n            nodes {\n                id\n                title\n                createdOn(formatString: \"MMMM DD, YYYY\")\n                body {\n                  childMarkdownRemark {\n                    html\n                  }\n                }\n                fields {\n                    path\n                }\n            }\n    }\n  }\n`;\n\nexport default BlogTemplate;"],"sourceRoot":""}